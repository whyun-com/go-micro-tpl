name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  CONFIG_PATH: /home/runner/work/go-micro-tpl/go-micro-tpl/config.example.yaml
jobs:

  ci:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
    # - name: Set up MinGW
    #   if: runner.os == 'Windows'
    #   run: echo "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH 
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
    - name: Install Windows packages
      if: runner.os == 'Windows'
      run: |
        choco install make -y
        echo "CONFIG_PATH=$env:GITHUB_WORKSPACE\config.example.yaml" >> $env:GITHUB_ENV


    - name: Build
      run: make build

    - name: Start Kafka  on Linux
      if: runner.os != 'Windows'
      run: docker-compose up -d
    - name: Start  Kafka and redis on Windows
      if: runner.os == 'Windows'
      run: |
        Set-PSDebug -Trace 1
        $KAFKA_VERSION="3.2.1"
        $KAFKA_URL="https://downloads.apache.org/kafka/${KAFKA_VERSION}/kafka_2.12-${KAFKA_VERSION}.tgz"
        Invoke-WebRequest -uri $KAFKA_URL -outfile kafka.tgz
        7z.exe x .\kafka.tgz
        $kafkaDir="c:\"
        7z.exe x .\kafka.tar -o${kafkaDir}
        $base="${kafkaDir}kafka_2.12-${KAFKA_VERSION}"
        Start-Process -NoNewWindow $base\bin\windows\zookeeper-server-start.bat $base\config\zookeeper.properties
        Start-Sleep -Seconds 7
        Start-Process -NoNewWindow $base\bin\windows\kafka-server-start.bat $base\config\server.properties
        $REDIS_URL="https://github.com/ServiceStack/redis-windows/raw/master/downloads/redis-latest.zip"
        Invoke-WebRequest -uri $REDIS_URL -outfile redis-latest.zip
        7z.exe x .\redis-latest.zip -oredis
        Start-Process -NoNewWindow  redis\redis-server.exe redis\redis.windows.conf


    - name: Test
      run: |
        echo $CONFIG_PATH
        make test && make coverage

    - name: Upload Coverage report to CodeCov
      uses: codecov/codecov-action@v1.0.0
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: ./coverage/coverage.out